from typing import Dict, List

Tippek=List[str]
"""Leadott tippek, azaz bet≈±k list√°j√°nak t√≠pusa."""

def kozte_van(betu:str, betuk:Tippek) -> bool:
    """Megadja, hogy a list√°ban m√°r benne van-e a megadott bet≈±, vagy sem.

    Args:
        betu (str): a keresett bet≈±
        betuk (Tippek): bet≈±k list√°ja

    Returns:
        bool: `True` ha benne van, `False` ha nincsen.
    """

    hamis = 1
    for i in range(len(betuk)):
        if betuk[i] == betu:
            return True
        else:
            hamis += 1
        
        if hamis == len(betuk):
            return False

specialis_karakterek=[' ','.',',','!','?',':','-']

def megjelenites(szo:str, betuk:Tippek) -> str:
    """Visszaad egy olyan sz√≥t, amiben a `betuk`-ben l√©v≈ë bet≈±k l√°tszanak, minden m√°s hely√©re `_` ker√ºl, kiv√©ve n√©h√°ny speci√°lis karaktert, amik megjelennek v√°ltoztat√°s n√©lk√ºl. Ezen karakterek list√°ja a `specialis_karakterek` glob√°lis list√°ban adott.

    Kis √©s nagy bet≈±ket megk√ºl√∂nb√∂zteti a f√ºggv√©ny.

    Args:
        szo (str): a sz√≥, aminek megjelen√≠tett v√°ltozat√°t meg szeretn√©nk kapni. 
        betuk (Tippek): Egy karakterb≈ël, bet≈±kb≈ël √°ll√≥ lista, amit m√°r tippelt√ºnk

    Returns:
        str: a megjelen√≠tett v√°ltozata a sz√≥nak
    """

    word = ""
    for i in range(len(szo)):
        if szo[i] in betuk and szo[i] == betuk[i]:
            word = word + szo[i]
        elif szo[i] in betuk and szo[i] != betuk[i]:
            word = word + "_"
        elif szo[i] in specialis_karakterek:
            for j in specialis_karakterek:
                if j == szo[i]:
                    word +=  specialis_karakterek[j]
    
    return word

def megfejtett(szo:str, betuk:Tippek) -> bool:
    """Megadja, hogy siker√ºlt-e m√°r megfejten√ºnk a sz√≥t, azaz minden benne lev≈ë bet≈± m√°r a tippjeink k√∂z√∂tt van.

    Args:
        szo (str): a kital√°land√≥ sz√≥
        betuk (Tippek): az eddig tippelt bet≈±k

    Returns:
        bool: `True` ha teljesen megfejtett√ºk a sz√≥t, `False` k√ºl√∂nben
    """
    jo_tippek = 0
    for i in range(len(szo)):
        if szo[i] in betuk:
            jo_tippek += 1
    
    if jo_tippek == len(szo):
        return True
    else:
        return False


def tartalmazza(szo:str, betu:str) -> bool:
    """Megadja, hogy a megaadott bet≈± szerepel-e a megadott sz√≥ban.

    Args:
        szo (str): a sz√≥
        betu (str): a bet≈±, amit keres√ºnk, felt√©telezhet≈ë, hogy 1 karakter hossz√∫

    Returns:
        bool: `True` ha szerepel, `False` ha nem
    """
    betuk = []
    for i in range(len(szo)):
        betuk.append(szo[i])
    
    if betu in betuk:
        return True
    else:
        return False
    


def rossz_tippek(szo:str, betuk:Tippek) -> int:
    """Megadja, hogy h√°ny rossz bet≈±t tippelt√ºnk eddig.

    Args:
        szo (str): a kital√°land√≥ sz√≥
        betuk (Tippek): az eddigi bet≈± tippjeink

    Returns:
        int: a rossz tippek sz√°ma
    """
    rossz_tippek = 0
    szobetui = []

    for i in range(len(szo)):
        szobetui.append(szo[i])

    for i in range(len(betuk)):
        if betuk[i] not in szobetui:
            rossz_tippek += 1
    
    return rossz_tippek


def eletek(osszes:int,elhasznalt:int)->str:
    """Visszaad egy olyan sz√∂veget, ami egy indik√°tor arra, h√°ny √©let√ºnk van m√©g.

    A sz√∂veg elej√©n van annyi üòÑ ah√°ny √©let√ºnk m√©g maradt, majd annyi üíÄ ah√°nyat m√°r "elj√°tszottunk".

    Args:
        osszes (int): az √∂sszes √©let√ºnk sz√°ma
        elhasznalt (int): az elj√°tszott √©letek (rossz bet≈± tippek) sz√°ma

    Returns:
        str: üòÑüòÑüòÑüíÄüíÄ form√°tum√∫ indik√°tor (a p√©lda adatai: 5 √∂sszes, 2 elhaszn√°lt)
    """
    osszeselet = osszes
    elhasznalt = rossz_tippek(szo,Tippek)
    eletek = ""

    for i in range(len(osszeselet-elhasznalt)):
        eletek = eletek + "üòÑ"
    
    for i in range(len(elhasznalt)):
        eletek = eletek + "üíÄ"
    
    return eletek

def akasztofa(szo:str,osszes_elet:int) -> None:
    """V√©gigvisz egy akaszt√≥fa j√°t√©kot, ahol a megadott sz√≥t kell kital√°lni, √©s `osszes_elet` rossz tipp ut√°n vesztett√ºnk.

    A j√°t√©k minden k√∂rben el≈ësz√∂r √≠rja ki, hogy mit l√°tunk a megfejtend≈ë sz√≥b√≥l, al√° egy indik√°tort arr√≥l, hogy h√°ny √©let√ºnk van m√©g, majd v√©g√ºl a tippelt karakterek list√°j√°t a tippek sorrendj√©ben.

    Ezt k√∂vet≈ëen az "Adja meg a kovetkezo betut: " ki√≠r√°ssal k√©rj√ºnk be egy bet≈±t. Ellen≈ërz√©s nem sz√ºks√©ges se arra, hogy egyetlen bet≈±t adtunk-e meg, se arra, hogy volt-e m√°r kor√°bban ez a bet≈±. A megadott bet≈±t irassuk is r√∂gt√∂n ki. (Szimpl√°n, egymag√°ban. Ennek puszt√°n annyi c√©lja van, hogy nyomon k√∂vethet≈ëbbek legyenek az out f√°jlok.)

    M√°s kiirat√°s nem t√∂rt√©nik, a j√°t√©k logik√°ja egy√©rtelm≈±: addig adunk le tippeket bet≈±kre, am√≠g vagy meg nem fejt≈ëdik a sz√≥, vagy el nem fogynak az √©leteink. T√∂bbsz√∂r leadhatjuk ugyanazt a tippet, de ez rossz, akkor t√∂bb √©letet is vesz el. A ki√≠ratott list√°ban is jelenjen meg dupl√°n akkor ez a bet≈±.

    Ha nyert√ºnk, m√©g ker√ºlj√∂n ki√≠r√°sra a megfejtett sz√≥, valamint al√° egy olyan sz√∂veg, hogy "Gratulalok, nyertel, es meg X eleted maradt!", ahol X √©rtelemszer≈±en a megmaradt √©letek sz√°ma.

    Ha vesztett√ºnk, akkor egy "Sajnalom, nem nyertel, ez lett volna a megoldas: MEGOLDAS".

    P√©ldakimenetek adottak.
    

    Args:
        szo (str): a megfejtend≈ë sz√≥
        osszes_elet (int): az √©leteink sz√°ma, azaz h√°ny rossz tipp ut√°n vesztett√ºnk
    """
    megmaradt_√©letek = osszes_elet
    index = 0
    if index > 0:
        rosszak = rossz_tippek(szo,Tippek)
    else:
        rosszak = 0
    
    while (rosszak != osszes_elet) or (megfejtett(szo, Tippek) == False) or index == 0:
        print(megjelenites(szo, Tippek))
        print(eletek(maxelet,rosszak))
        print(Tippek)
        betu = input("Adja meg a kovetkezo betut: ")
        Tippek.append(bet≈±)
    
        megmaradt_√©letek -= 1
        index += 1

    if megfejtett(szo, Tippek) == True:
        print(megfejtett(szo, Tippek))
        print("Gratulalok, nyertel, es meg {} eleted maradt!".format(megmaradt_√©letek))
    
    if rossz_tippek == osszes_elet:
        print("Sajnalom, nem nyertel, ez lett volna a megoldas: {}".format(szo))

    



# Ez alatt ne tessek modositani.

szo=input()
maxelet=int(input())
akasztofa(szo,maxelet)





